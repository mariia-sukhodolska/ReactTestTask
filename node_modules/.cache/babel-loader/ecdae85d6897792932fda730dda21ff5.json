{"ast":null,"code":"import { all, put, takeLatest } from 'redux-saga/effects';\nimport { loadTVShowsSuccess, failureTVShows } from './tvShows/tvShows.actions';\nimport { actionTypes } from './tvShows/tvShow.types';\nexport function* loadTVShows({\n  value,\n  queryString\n}) {\n  try {\n    const res = yield fetch(`http://api.tvmaze.com/search/shows?${queryString}=${value}`);\n    const data = yield res.json();\n    yield put(loadTVShowsSuccess(data));\n  } catch (err) {\n    yield put(failureTVShows(err));\n  }\n}\n\nfunction* rootSaga() {\n  yield all([takeLatest(actionTypes.LOAD_TV_SHOWS, loadTVShows)]);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/mariia/Desktop/gitHubTestRepo/react-test-task/src/store/saga.ts"],"names":["all","put","takeLatest","loadTVShowsSuccess","failureTVShows","actionTypes","loadTVShows","value","queryString","res","fetch","data","json","err","rootSaga","LOAD_TV_SHOWS"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,EAAmBC,UAAnB,QAAqC,oBAArC;AAEA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,2BAAnD;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAQA,OAAO,UAAUC,WAAV,CAAsB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAtB,EAAoD;AACzD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,sCAAqCF,WAAY,IAAGD,KAAM,EADtC,CAAvB;AAGA,UAAMI,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,UAAMX,GAAG,CAACE,kBAAkB,CAACQ,IAAD,CAAnB,CAAT;AACD,GAND,CAME,OAAOE,GAAP,EAAY;AACZ,UAAMZ,GAAG,CAACG,cAAc,CAACS,GAAD,CAAf,CAAT;AACD;AACF;;AAED,UAAUC,QAAV,GAAqB;AACnB,QAAMd,GAAG,CAAC,CAACE,UAAU,CAACG,WAAW,CAACU,aAAb,EAA4BT,WAA5B,CAAX,CAAD,CAAT;AACD;;AAED,eAAeQ,QAAf","sourcesContent":["import { all, put, takeLatest } from 'redux-saga/effects';\n\nimport { loadTVShowsSuccess, failureTVShows } from './tvShows/tvShows.actions';\nimport { actionTypes } from './tvShows/tvShow.types';\n\ninterface Path {\n  type: string;\n  value: string;\n  queryString: string;\n}\n\nexport function* loadTVShows({ value, queryString }: Path) {\n  try {\n    const res = yield fetch(\n      `http://api.tvmaze.com/search/shows?${queryString}=${value}`\n    );\n    const data = yield res.json();\n    yield put(loadTVShowsSuccess(data));\n  } catch (err) {\n    yield put(failureTVShows(err));\n  }\n}\n\nfunction* rootSaga() {\n  yield all([takeLatest(actionTypes.LOAD_TV_SHOWS, loadTVShows)]);\n}\n\nexport default rootSaga;\n"]},"metadata":{},"sourceType":"module"}