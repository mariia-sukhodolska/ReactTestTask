{"ast":null,"code":"var _jsxFileName = \"/Users/mariia/Desktop/gitHubTestRepo/react-test-task/src/features/TVShows/TVShows.tsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectTVShows, selectIsTVShowsLoaded } from '../../store/tvShows/tvShows.selectors';\nimport { loadTVShows } from '../../store/tvShows/tvShows.actions';\nimport { Table } from '../../components/Table/Table';\nimport { sortArrByDirection } from '../../shared/utils/common.utils';\nimport styles from './TVShows.module.css';\nexport const TVShows = () => {\n  const dispatch = useDispatch();\n  const fetchedShows = useSelector(selectTVShows);\n  const isTVShowsLoaded = useSelector(selectIsTVShowsLoaded);\n  const [shows, setShows] = useState([]);\n  const [activeSortLabel, setActiveSortLabel] = useState(null);\n  const initialNameValue = 'girls';\n  const tableHeader = [{\n    name: 'Show name',\n    filter: {\n      name: 'search',\n      queryString: 'q'\n    },\n    sortKey: 'name'\n  }, {\n    name: 'Language'\n  }, {\n    name: 'Genres'\n  }, {\n    name: 'Status'\n  }, {\n    name: 'Rating',\n    sortKey: 'rating'\n  }];\n  useEffect(() => {\n    dispatch(loadTVShows(initialNameValue, 'q'));\n  }, [dispatch]);\n  useEffect(() => {\n    if (isTVShowsLoaded && fetchedShows) {\n      setShows(fetchedShows);\n      setActiveSortLabel(null);\n    }\n  }, [isTVShowsLoaded, fetchedShows]);\n  const onSortCallback = useCallback((value, sortDirection) => {\n    setActiveSortLabel(value);\n    setShows(sortArrByDirection(shows, sortDirection, value));\n  }, [shows, setShows]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"TV Shows\"), /*#__PURE__*/React.createElement(Table, {\n    data: shows,\n    isLoaded: isTVShowsLoaded,\n    tableHeader: tableHeader,\n    onSort: onSortCallback,\n    activeSortLabel: activeSortLabel,\n    initialNameValue: initialNameValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/mariia/Desktop/gitHubTestRepo/react-test-task/src/features/TVShows/TVShows.tsx"],"names":["React","useCallback","useEffect","useState","useDispatch","useSelector","selectTVShows","selectIsTVShowsLoaded","loadTVShows","Table","sortArrByDirection","styles","TVShows","dispatch","fetchedShows","isTVShowsLoaded","shows","setShows","activeSortLabel","setActiveSortLabel","initialNameValue","tableHeader","name","filter","queryString","sortKey","onSortCallback","value","sortDirection","container"],"mappings":";AAAA,OAAOA,KAAP,IAAoBC,WAApB,EAAiCC,SAAjC,EAA4CC,QAA5C,QAA4D,OAA5D;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,aADF,EAEEC,qBAFF,QAGO,uCAHP;AAKA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,KAAT,QAAsB,8BAAtB;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,OAAO,MAAMC,OAAW,GAAG,MAAM;AAC/B,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,YAAY,GAAGT,WAAW,CAACC,aAAD,CAAhC;AACA,QAAMS,eAAe,GAAGV,WAAW,CAACE,qBAAD,CAAnC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAc,EAAd,CAAlC;AACA,QAAM,CAACe,eAAD,EAAkBC,kBAAlB,IAAwChB,QAAQ,CACpD,IADoD,CAAtD;AAGA,QAAMiB,gBAAgB,GAAG,OAAzB;AACA,QAAMC,WAAkC,GAAG,CACzC;AACEC,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,MAAM,EAAE;AACND,MAAAA,IAAI,EAAE,QADA;AAENE,MAAAA,WAAW,EAAE;AAFP,KAFV;AAMEC,IAAAA,OAAO,EAAE;AANX,GADyC,EASzC;AACEH,IAAAA,IAAI,EAAE;AADR,GATyC,EAYzC;AACEA,IAAAA,IAAI,EAAE;AADR,GAZyC,EAezC;AACEA,IAAAA,IAAI,EAAE;AADR,GAfyC,EAkBzC;AACEA,IAAAA,IAAI,EAAE,QADR;AAEEG,IAAAA,OAAO,EAAE;AAFX,GAlByC,CAA3C;AAwBAvB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAACL,WAAW,CAACY,gBAAD,EAAmB,GAAnB,CAAZ,CAAR;AACD,GAFQ,EAEN,CAACP,QAAD,CAFM,CAAT;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,eAAe,IAAID,YAAvB,EAAqC;AACnCG,MAAAA,QAAQ,CAACH,YAAD,CAAR;AACAK,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;AACF,GALQ,EAKN,CAACJ,eAAD,EAAkBD,YAAlB,CALM,CAAT;AAOA,QAAMY,cAAc,GAAGzB,WAAW,CAChC,CAAC0B,KAAD,EAAoBC,aAApB,KAAwD;AACtDT,IAAAA,kBAAkB,CAACQ,KAAD,CAAlB;AACAV,IAAAA,QAAQ,CAACP,kBAAkB,CAACM,KAAD,EAAQY,aAAR,EAAuBD,KAAvB,CAAnB,CAAR;AACD,GAJ+B,EAKhC,CAACX,KAAD,EAAQC,QAAR,CALgC,CAAlC;AAQA,sBACE;AAAK,IAAA,SAAS,EAAEN,MAAM,CAACkB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAEb,KADR;AAEE,IAAA,QAAQ,EAAED,eAFZ;AAGE,IAAA,WAAW,EAAEM,WAHf;AAIE,IAAA,MAAM,EAAEK,cAJV;AAKE,IAAA,eAAe,EAAER,eALnB;AAME,IAAA,gBAAgB,EAAEE,gBANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAaD,CAjEM","sourcesContent":["import React, { FC, useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectTVShows,\n  selectIsTVShowsLoaded\n} from '../../store/tvShows/tvShows.selectors';\n\nimport { loadTVShows } from '../../store/tvShows/tvShows.actions';\nimport { Table } from '../../components/Table/Table';\nimport { sortArrByDirection } from '../../shared/utils/common.utils';\nimport styles from './TVShows.module.css';\n\nexport const TVShows: FC = () => {\n  const dispatch = useDispatch();\n  const fetchedShows = useSelector(selectTVShows);\n  const isTVShowsLoaded = useSelector(selectIsTVShowsLoaded);\n  const [shows, setShows] = useState<TV.TVShow[]>([]);\n  const [activeSortLabel, setActiveSortLabel] = useState<TV.SortKey | null>(\n    null\n  );\n  const initialNameValue = 'girls';\n  const tableHeader: Record<string, any>[] = [\n    {\n      name: 'Show name',\n      filter: {\n        name: 'search',\n        queryString: 'q'\n      },\n      sortKey: 'name'\n    },\n    {\n      name: 'Language'\n    },\n    {\n      name: 'Genres'\n    },\n    {\n      name: 'Status'\n    },\n    {\n      name: 'Rating',\n      sortKey: 'rating'\n    }\n  ];\n\n  useEffect(() => {\n    dispatch(loadTVShows(initialNameValue, 'q'));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (isTVShowsLoaded && fetchedShows) {\n      setShows(fetchedShows);\n      setActiveSortLabel(null);\n    }\n  }, [isTVShowsLoaded, fetchedShows]);\n\n  const onSortCallback = useCallback(\n    (value: TV.SortKey, sortDirection: TV.SortDirection) => {\n      setActiveSortLabel(value);\n      setShows(sortArrByDirection(shows, sortDirection, value));\n    },\n    [shows, setShows]\n  );\n\n  return (\n    <div className={styles.container}>\n      <h1>TV Shows</h1>\n      <Table\n        data={shows}\n        isLoaded={isTVShowsLoaded}\n        tableHeader={tableHeader}\n        onSort={onSortCallback}\n        activeSortLabel={activeSortLabel}\n        initialNameValue={initialNameValue}\n      />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}